name: build linux
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [RelWithDebInfo]
        enable_ui: [on]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: runner.os == 'Linux'
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Create folder
      shell: bash
      run: |
        mkdir -p deps/skia/out/Release-x64
    - name: schmiddim-wget-unzip
      uses: schmiddim/action-wget-unzip@v2
      with:
        url: 'https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64.zip'
        destination: deps/skia/out/Release-x64
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        fi
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=OFF \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=deps/skia \
          -DCMAKE_CXX_FLAGS=-stdlib=libc++ \ 
          -DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          build/bin
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
